{
"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
"name": "thinkScript",
"scopeName": "source.ts",
"patterns": [
    { "include": "#code" }
],
"repository": {
"code": {
    "patterns": [
        { "include": "#comments" },
        { "include": "#strings" },
        { "include": "#number" },
        { "include": "#operators" },
        { "include": "#punctuation" },
        { "include": "#keywords" },
        { "include": "#known-enums" },
        { "include": "#support" }
    ]
},
"comments": {
    "patterns": [
        {
        "name": "comment.line.number-sign.ts",
        "begin": "#",
        "end": "\n"
        }
    ]
},
"keywords": {
    "patterns": [
        {
        "name": "keyword.control.ts",
        "match": "\\b(bar|bars|profile|rec|reference|script)\\b"
        },
        {
        "name": "constant.language.ts",
        "match": "\\b(true|false|default|yes|no)\\b"
        },
        {
        "name": "keyword.control.loop.ts",
        "match": "\\b(do|while|fold|to|from|with)\\b"
        },
        {
        "name": "keyword.control.conditional.ts",
        "match": "\\b(if|case|then|else)\\b"
        },
        {
        "name": "keyword.control.switch.ts",
        "match": "\b(switch)\b"
        },
        {
        "name": "keyword.operator.logical.ts keyword.operator.logical.comparison.ts",
        "match": "(?<!\\.)\\b(and|not|or|equal|equals|is|greater than|less than|within|between|above|below|ago|crosses)\\b(?![?!])"
        },
        {
        "match": "\\b(def)\\s+([_[:alpha:]][_[:alnum:]]+)\\s*(\\=)",
        "captures": {
            "1": { "name": "keyword.control.def.ts" },
            "2": { "name": "entity.name.variable.local.ts variable.other.definition.ts variable.other.constant.ts" },
            "3": { "name": "keyword.operator.assignment.ts" }
        }
        },
        {
        "match": "\\b(def)\\s+([_[:alpha:]][_[:alnum:]]+)\\b",
        "captures": {
            "1": { "name": "keyword.control.def" },
            "2": { "name": "entity.name.variable.local.ts variable.other.definition.ts variable.other.definition.readwrite.ts" },
            "3": { "name": "keyword.operator.assignment.ts" }
        }
        },
        {
        "match": "\\b(?:(input))\\b\\s*\\b([_[:alpha:]][_[:alnum:]]*)\\b",
        "captures": {
            "1": { "name": "keyword.other.const.ts keyword.control.parameter.ts" },
            "2": { "name": "entity.name.variable.local.ts variable.parameter.ts" }
        }
        },
        {
        "match": "\\b(?:(declare))\\b\\s*\\b([_[:alpha:]][_[:alnum:]]*)\\b",
        "captures": {
            "1": { "name": "keyword.preprocessor.define.ts keyword.control.directive.define.ts" },
            "2": { "name": "entity.name.variable.preprocessor.symbol.ts" }
        }
        },
        {
        "match": "\\b(?:(plot))\\b\\s*\\b([_[:alpha:]][_[:alnum:]]*)\\b",
        "captures": {
            "1": { "name": "storage.modifier.plot.ts keyword.control.yield.plot.ts" },
            "2": { "name": "entity.name.variable.local.ts variable.other.definition.ts" }
        }
        }
    ]
    },
    "known-enums": {
    "patterns": [
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(Double|double)\\.(E|NaN|NEGATIVE_INFINITY|Pi|POSITIVE_INFINITY)\\b",
        "captures": { "1": { "name": "storage.type.interface support.class.builtin" }, "2": { "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(AggregationPeriod)\\.(MIN|TWO_MIN|THREE_MIN|FOUR_MIN|FIVE_MIN|TEN_MIN|FIFTEEN_MIN|TWENTY_MIN|THIRTY_MIN|HOUR|TWO_HOURS|FOUR_HOURS|DAY|TWO_DAYS|THREE_DAYS|FOUR_DAYS|WEEK|MONTH|OPT_EXP|QUARTER|YEAR)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(Alert)\\.(BAR|ONCE|TICK)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(AverageType)\\.(EXPONENTIAL|HULL|SIMPLE|WEIGHTED|WILDERS)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(ChartType)\\.(BAR|CANDLE|CANDLE_TREND|HEIKIN_ASHI|EQUIVOLUME|LINE|AREA)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(Color)\\.(BLACK|BLUE|CURRENT|CYAN|DARK_GRAY|DARK_GREEN|DARK_ORANGE|DARK_RED|DOWNTICK|GRAY|GREEN|LIGHT_GRAY|LIGHT_GREEN|LIGHT_ORANGE|LIGHT_RED|LIME|MAGENTA|ORANGE|PINK|PLUM|RED|UPTICK|VIOLET|WHITE|YELLOW)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(CrossingDirection)\\.(ABOVE|BELOW|ANY)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(Curve)\\.(FIRM|LONG_DASH|MEDIUM_DASH|SHORT_DASH|POINTS)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(EarningTime)\\.(ANY|BEFORE_MARKET|AFTER_MARKET)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(Events)\\.(CONFERENCE_CALL|DIVIDEND|EARNINGS|SPLIT)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(FiscalPeriod)\\.(QUARTER|YEAR)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(FundamentalType)\\.(HIGH|LOW|CLOSE|OPEN|HL2|HLC3|OHLC4|VWAP|VOLUME|OPEN_INTEREST|IMP_VOLATILITY|TICK_COUNT)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(MonkeyVolumeShowStyle)\\.(ALL|LAST|NONE)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(NumberFormat)\\.(DOLLAR|THREE_DECIMAL_PLACES|TWO_DECIMAL_PLACES)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(OptionsClass)\\.(CALL|PUT)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(OrderType)\\.(BUY_AUTO|BUY_TO_CLOSE|BUY_TO_OPEN|SELL_AUTO|SELL_TO_CLOSE|SELL_TO_OPEN)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(PaintingStrategy)\\.(ARROW_DOWN|ARROW_UP|BOOLEAN_ARROW_DOWN|BOOLEAN_ARROW_UP|BOOLEAN_POINTS|BOOLEAN_WEDGE_DOWN|BOOLEAN_WEDGE_UP|DASHES|HISTOGRAM|HORIZONTAL|LINE|LINE_VS_POINTS|LINE_VS_SQUARES|LINE_VS_TRIANGLES|POINTS|SQUARED_HISTOGRAM|SQUARES|TRIANGLES|VALUES_ABOVE|VALUES_BELOW)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(PricePerRow)\\.(AUTOMATIC|TICKSIZE)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(PriceType)\\.(ASK|BID|LAST|MARK)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(ProfitLossMode)\\.(COST_BASIS|EXECUTION_PRICE)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        },
        {
        "name": "variable.other.constant variable.other.enummember entity.name.variable.enum-member",
        "match": "\\b(Sound)\\.(NoSound|Bell|Ding|Ring|Chimes)\\b",
        "captures": { "1": { "name": "meta.enum entity.name.type.enum" }, "2": { "name": "variable.other.constant variable.other.enummember support.constant entity.name.variable.enum-member support.constant" } }
        }
    ]
    },
    "number": {
    "patterns": [
        {
        "name": "constant.numeric.ts",
        "match": "\\b[0-9]+\\.?[0-9]*\\b"
        }
    ]
    },
    "operators": {
    "patterns": [
        {
        "match": "(==|!=|<=|>=|<>|<|>)",
        "name": "keyword.operator.comparison.ts"
        },
        {
        "match": "(?<!=|!)(=)(?!=)",
        "name": "keyword.operator.assignment.ts"
        },
        {
        "match": "(!|\\+|-|\/|\\*|%)",
        "name": "keyword.operator.arithmetic.ts"
        },
        {
        "match": "\\&|\\|",
        "name": "keyword.operator.bitwise.ts"
        },
        {
        "match": "\\!|&&|\\|\\|",
        "name": "keyword.operator.logical.ts"
        },
        {
        "match": "=",
        "name": "punctuation.separator.equals.ts"
        }
    ]
    },
    "punctuation": {
    "patterns": [
        {
        "name": "punctuation.separator.delimiter.ts punctuation.separator.comma.ts",
        "match": ","
        },
        {
        "name": "punctuation.terminator.statement.ts",
        "match": ";"
        },
        {
        "name": "punctuation.accessor.ts",
        "match": "(?<=\\b\\w+)\\."
        },
        {
        "begin": "(?<=\\b\\w+)\\(",
        "beginCaptures": {
            "0": { "name": "function.punctuation.parenthesis.open.ts" }
        },
        "end": "\\)",
        "endCaptures": {
            "0": { "name": "function.punctuation.parenthesis.close.ts" }
        },
        "patterns": [
            {
            "include": "#code"
            }
        ]
        },
        {
        "begin": "\\(",
        "beginCaptures": {
            "0": { "name": "punctuation.parenthesis.open.ts"  }
        },
        "end": "\\)",
        "endCaptures": {
            "0": { "name": "punctuation.parenthesis.close.ts" }
        },
        "patterns": [
            {
            "include": "#code"
            }
        ]
        },
        {
        "begin": "(\\b\\w+\\b)(\\[)",
        "beginCaptures": {
            "1": { "name": "storage.type.array.ts storage.type.object.array.ts variable.array variable.object.array.ts" },
            "2": { "name": "punctuation.begin.bracket.square.ts punctuation.bracket.square.open.ts array.indexer.bracket.square.open.ts" }
        },
        "end": "\\s*(\\b[0-9]+\\b)\\s*(\\])",
        "endCaptures": {
            "1": { "name": "constant.numeric.integer.ts" },
            "2": { "name": "punctuation.end.bracket.square.ts punctuation.bracket.square.close.ts array.indexer.bracket.square.close.ts" }
        },
        "patterns": [
            {
            "include": "#code"
            }
        ]
        }
    ]
    },
    "strings": {
        "name": "string.quoted.double.ts",
        "begin": "\"",
        "end": "\"",
        "patterns": [
            {
            "name": "constant.character.escape.ts",
            "match": "\\\\."
            }
        ]
    },
    "support": {
    "patterns": [
        {
        "match": "\\b(ask|bid|close|high|hl2|hlc3|imp_volatility|low|ohlc4|open|open_interest|tick_count|volume|vwap)\\b",
        "name": "support.function.builtin.ts"
        },
        {
        "name": "support.type.primitive.ts support.class.builtin.ts support.class.ts",
        "match": "\\b(Any|Boolean|Double|Int|String|Symbol)(?:(?=\\.))"
        },
        {
        "name": "support.type.primitive.ts",
        "match": "(?i)\\b(Any|Boolean|Double|Int|String|Symbol)\\b"
        },
        {
        "name": "storage.type.interface.ts support.class.builtin.ts",
        "match": "\\b(CustomColor|IDataHolder|AggregationPeriod|Alert|AverageType|ChartType|Color|CrossingDirection|Curve|Double|EarningTime|Events|FiscalPeriod|FundamentalType|MonkeyVolumeShowStyle|NumberFormat|OptionClass|OrderType|PaintingStrategy|PricePerRow|PriceType|ProfitLossMode|Sound)(?:(?=\\.))"
        },
        {
        "name": "support.type.builtin.ts support.class.ts",
        "match": "\\b(CustomColor|IDataHolder|AggregationPeriod|Alert|AverageType|ChartType|Color|CrossingDirection|Curve|Double|EarningTime|Events|FiscalPeriod|FundamentalType|MonkeyVolumeShowStyle|NumberFormat|OptionClass|OrderType|PaintingStrategy|PricePerRow|PriceType|ProfitLossMode|Sound)\\b"
        },
        {
        "name": "support.function.math.ts",
        "match": "\\b(AbsValue|ACos|ASin|ATan|Ceil|Cos|Crosses|Exp|Floor|IsInfinite|IsNaN|Lg|Log|Max|Min|Power|Random|Round|RoundDown|RoundUp|Sign|Sin|Sqr|Sqrt|Sum|Tan|TotalSum|absValue|aCos|aSin|aTan|isInfinite|isNaN|roundDown|roundUp|totalSum)\\b(?=\\()"
        },
        {
        "name": "support.function.option-related.ts entity.name.function.ts entity.name.function.ts",
        "match": "\\b(?i)(Delta|Gamma|GetATMOption|GetDaysToExpiration|GetNextExpirationOption|GetNextITMOption|GetNextOTMOption|GetStrike|GetUnderlyingSymbol|IsEuropean|IsOptionable|IsPut|OptionPrice|Rho|Theta|Vega)\\b(?=\\()"
        },
        {
        "name": "support.function.technical-analysis.ts entity.name.function.ts",
        "match": "\\b(?i)(AccumDist|Average|BodyHeight|EMA2|ExpAverage|FastKCustom|GetMarketMakerMove|GetMaxValueOffset|GetMinValueOffset|Highest|HighestAll|HighestWeighted|IsAscending|IsDescending|IsDoji|IsLongBlack|IsLongWhite|Lowest|LowestAll|LowestWeighted|Median|MidBodyVal|MoneyFlow|MovingAverage|TrueRange|Ulcer|WildersAverage|WMA)\\b(?=\\()"
        },
        {
        "name": "support.function.statistical.ts entity.name.function.ts",
        "match": "\\b(?i)(Correlation|Covariance|Inertia|InertiaAll|LinDev|StDev|StDevAll|StErr|StErrAll)\\b(?=\\()"
        },
        {
        "name": "support.function.datetime.ts entity.name.function.ts",
        "match": "\\b(?i)(CountTradingDays|DaysFromDate|DaysTillDate|GetDay|GetDayOfMonth|GetDayOfWeek|GetLastDay|GetLastMonth|GetLastWeek|GetLastYear|GetMonth|GetTime|GetWeek|GetYear|GetYYYYMMDD|RegularTradingEnd|RegularTradingStart|SecondsFromTime|SecondsTillTime)\\b(?=\\()"
        },
        {
        "name": "support.function.corporate-actions.ts entity.name.function.ts",
        "match": "\\b(?i)(GetActualEarnings|GetDividend|GetEstimatedEarnings|GetEventOffset|GetSplitDenominator|GetSplitNumerator|HasConferenceCall|HasEarnings)\\b(?=\\()"
        },
        {
        "name": "support.function.appearance.ts entity.name.function.ts",
        "match": "\\b(?i)(AddChartBubble|AddCloud|AddLabel|AddVerticalLine|AssignBackgroundColor|AssignNormGradientColor|AssignPriceColor|AssignValueColor|Color|CreateColor|DefineColor|DefineGlobalColor|EnableApproximation|GetColor|GlobalColor|Hide|HideBubble|HidePricePlot|HideTitle|SetChartType|SetDefaultColor|SetHiding|SetLineWeight|SetPaintingStrategy|SetStyle|TakeValueColor)\\b(?=\\()"
        },
        {
        "name": "support.function.portfolio.ts entity.name.function.ts",
        "match": "\\b(?i)(GetAveragePrice|GetNetLiq|GetOpenPL|GetQuantity|GetTotalCash)\\b(?=\\()"
        },
        {
        "name": "support.function.profiles.ts entity.name.function.ts",
        "match": "\\b(?i)(DataProfile|GetHighest|GetHighestValueArea|GetLowest|GetLowestValueArea|GetPointOfControl|MonkeyBars|Show|TimeProfile|VolumeProfile)\\b(?=\\()"
        },
        {
        "name": "support.function.fundamentals.ts entity.name.function.ts",
        "match": "\\b(?i)(BookValuePerShare|CurrentRatio|DividendPayout|DividendsPerShareTTM|EarningsPerShareTTM|FinancialLeverage|FixedChargeCoverageRatio|FreeCashFlowPerShare|GrossProfitMargin|InterestRate|InventoryTurnover|LongTermDebtToCapital|NetProfitMargin|OperatingProfitMargin|QuickRatio|ReturnOnAssets|ReturnOnEquity|SalesPerShare|TaxRate|TotalAssetTurnover)\\b(?=\\()"
        },
        {
        "name": "support.function.utility.ts entity.name.function.ts",
        "match": "\\b(AddOrder|Alert|AsDollars|AsPercent|AsPrice|Assert|AsText|BarNumber|Between|CompoundValue|Concat|EntryPrice|First|FPL|Fundamental|GetAggregationPeriod|GetInterestRate|GetPriceType|GetSymbol|GetSymbolPart|GetValue|GetYield|HasContractChangeEvent|If|TickSize|TickValue|addOrder|asDollars|asPercent|asPrice|asText|barNumber|compoundValue|entryPrice|getAggregationPeriod|getInterestRate|getPriceType|getSymbol|getSymbolPart|getValue|getYield|hasContractChangeEvent|tickSize|tickValue)\\b(?=\\()"
        }
    ]
    }
}
}
